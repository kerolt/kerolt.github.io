<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cilium on Kerolt&#39;s Blog</title>
    <link>https://kerolt.github.io/tags/cilium/</link>
    <description>Recent content in Cilium on Kerolt&#39;s Blog</description>
    <image>
      <title>Kerolt&#39;s Blog</title>
      <url>https://kerolt.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kerolt.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.152.2</generator>
    <language>en</language>
    <lastBuildDate>Sun, 22 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://kerolt.github.io/tags/cilium/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【eBPF学习】使用fentry跟踪tcp连接</title>
      <link>https://kerolt.github.io/posts/ebpf/ebpf%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8fentry%E8%B7%9F%E8%B8%AAtcp%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Sun, 22 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://kerolt.github.io/posts/ebpf/ebpf%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8fentry%E8%B7%9F%E8%B8%AAtcp%E8%BF%9E%E6%8E%A5/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文是对 &lt;a href=&#34;https://github.com/cilium/ebpf/tree/main/examples/fentry&#34;&gt;cilium/ebpf examples: fentry &lt;/a&gt;的一个学习记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这里，我们将会利用 ebpf 监控并记录系统上所有新发起的 IPv4 TCP 连接，其工作流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;挂载点&lt;/strong&gt;：程序使用 &lt;code&gt;fentry&lt;/code&gt; 机制把自己附加到内核函数 &lt;code&gt;tcp_connect&lt;/code&gt; 的入口。每当系统中有任何一个进程尝试发起一个 TCP 连接时，这个内核函数就会被调用，从而触发我们的 eBPF 程序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过滤&lt;/strong&gt;：程序首先检查连接的地址族是否为 &lt;code&gt;AF_INET&lt;/code&gt;，即 IPv4。如果不是（例如是 IPv6），程序会直接退出，不做任何处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据提取&lt;/strong&gt;：对于 IPv4 连接，程序会从传递给 &lt;code&gt;tcp_connect&lt;/code&gt; 函数的 &lt;code&gt;struct sock&lt;/code&gt; 参数中提取以下关键信息：
&lt;ul&gt;
&lt;li&gt;源 IP 地址 (&lt;code&gt;saddr&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;目标 IP 地址 (&lt;code&gt;daddr&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;目标端口 (&lt;code&gt;dport&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;源端口 (&lt;code&gt;sport&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取进程信息&lt;/strong&gt;：使用 &lt;code&gt;bpf_get_current_comm()&lt;/code&gt; 辅助函数获取当前发起连接的进程名（例如 &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;ssh&lt;/code&gt; 等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据发送&lt;/strong&gt;：程序将收集到的所有信息（IP 地址、端口、进程名）打包成一个 &lt;code&gt;struct event&lt;/code&gt; 结构体，并通过一个高效的 &lt;code&gt;ringbuf&lt;/code&gt; 映射发送到用户空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;什么是-fentry&#34;&gt;什么是 fentry&lt;/h2&gt;
&lt;p&gt;fentry 是 eBPF 中的一种程序附加类型，全称为 &amp;ldquo;function entry&amp;rdquo;（函数入口）。它是现代 Linux 内核中用于跟踪和性能分析的高效机制。&lt;/p&gt;
&lt;p&gt;fentry 允许将 eBPF 程序附加到内核函数的入口点，当该函数被调用时，eBPF 程序会在函数的主体执行前运行。这种机制让我们可以：&lt;/p&gt;</description>
    </item>
    <item>
      <title>【eBPF学习】使用kprobe监测捕获unlink系统调用</title>
      <link>https://kerolt.github.io/posts/ebpf/ebpf%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8kprobe%E7%9B%91%E6%B5%8B%E6%8D%95%E8%8E%B7unlink%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
      <pubDate>Tue, 10 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://kerolt.github.io/posts/ebpf/ebpf%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8kprobe%E7%9B%91%E6%B5%8B%E6%8D%95%E8%8E%B7unlink%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文是对于 &lt;a href=&#34;https://eunomia.dev/zh/tutorials/2-kprobe-unlink/&#34;&gt;Eunomia Tutorials 2&lt;/a&gt; 的一个学习记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;什么是-kprobe&#34;&gt;什么是 kprobe&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Kprobe​&lt;/strong&gt;​（Kernel Probe）是 Linux 内核提供的一项强大功能，它允许开发者和系统管理员在不​&lt;strong&gt;​修改内核源代码​&lt;/strong&gt;​或重启系统的前提下，在任意内核函数处动态插入“探针”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;​&lt;strong&gt;​工作原理​&lt;/strong&gt;​：通过​&lt;strong&gt;​临时替换​&lt;/strong&gt;​目标函数的前几条指令为一个断点指令（如 int3）&lt;/li&gt;
&lt;li&gt;​&lt;strong&gt;​执行流程​&lt;/strong&gt;​：当程序执行到断点时，CPU 控制权会交给 kprobe 系统&lt;/li&gt;
&lt;li&gt;​&lt;strong&gt;​事件回调​&lt;/strong&gt;​：系统执行注册的回调函数，完成数据采集后恢复原函数执行&lt;/li&gt;
&lt;li&gt;​&lt;strong&gt;​两种类型​&lt;/strong&gt;​：
&lt;ul&gt;
&lt;li&gt;​&lt;strong&gt;​Kprobe​&lt;/strong&gt;​：在函数入口处执行&lt;/li&gt;
&lt;li&gt;​&lt;strong&gt;​Kretprobe​&lt;/strong&gt;​：在函数返回时执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种机制为我们提供了​&lt;strong&gt;​零侵入式​&lt;/strong&gt;​的内核行为洞察能力，特别适用于​&lt;strong&gt;​实时监控​&lt;/strong&gt;​、​&lt;strong&gt;​性能分析​&lt;/strong&gt;​和​&lt;strong&gt;​故障排查​&lt;/strong&gt;​等场景。&lt;/p&gt;
&lt;h2 id=&#34;do_unlinkat-的作用&#34;&gt;do_unlinkat 的作用&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;do_unlinkat&lt;/code&gt; 是 Linux 内核中的一个内部函数，它的作用是&lt;strong&gt;执行文件或目录的删除操作&lt;/strong&gt;。其在内核源码中的定义如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;do_unlinkat&lt;/span&gt;(&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; dfd, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; filename &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;name) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;do_unlinkat&lt;/code&gt; 是内核中实际执行文件删除逻辑的最终汇聚点&lt;/li&gt;
&lt;li&gt;用户空间调用 &lt;code&gt;unlink()&lt;/code&gt;、&lt;code&gt;unlinkat()&lt;/code&gt; 或 &lt;code&gt;rmdir()&lt;/code&gt; 等系统调用时，最终都会通过系统调用表路由到这个函数&lt;/li&gt;
&lt;li&gt;采用文件描述符 (AT_FDCWD) 和路径名的组合方式，提供了灵活的路径解析能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vmlinuxh&#34;&gt;vmlinux.h&lt;/h2&gt;
&lt;p&gt;不同内核版本之间，内核数据结构如结构体字段位置、字段名称等都可能发生变化。传统的 eBPF 程序直接使用内核头文件会导致：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;兼容性问题：程序在​&lt;strong&gt;​不同内核版本​&lt;/strong&gt;​中崩溃&lt;/li&gt;
&lt;li&gt;字段偏移错误：读取到​&lt;strong&gt;​无效内存数据​&lt;/strong&gt;​&lt;/li&gt;
&lt;li&gt;维护困难：需要针对​&lt;strong&gt;​每个内核版本​&lt;/strong&gt;​进行适配&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;vmlinux.h&lt;/code&gt; 利用内核的​&lt;strong&gt;​BTF（BPF Type Format）​&lt;/strong&gt;​ 信息生成与当前运行内核完全匹配的类型定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bpftool btf dump file /sys/kernel/btf/vmlinux format c &amp;gt; vmlinux.h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;内核态程序-kprobe_unlinkbpfc&#34;&gt;内核态程序 kprobe_unlink.bpf.c&lt;/h2&gt;
&lt;p&gt;为 &lt;code&gt;do_unlinkat&lt;/code&gt; 函数同时设置入口探针和返回探针：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
